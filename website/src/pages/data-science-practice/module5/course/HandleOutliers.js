import React from 'react';
import { Container, Title, Text, Stack, List, Group } from '@mantine/core';
import { IconAlertTriangle, IconChartBar, IconAdjustments } from '@tabler/icons-react';
import CodeBlock from 'components/CodeBlock';
import DataInteractionPanel from 'components/DataInteractionPanel';

const HandleOutliers = () => {
  const metadata = {
    description: "This dataset includes various metrics crucial for analyzing restaurant performance and revenue.",
    source: "Restaurant Performance Records",
    target: "Revenue",
    listData: [
      { name: "Seating Capacity", description: "The number of seats available in the restaurant" },
      { name: "Average Meal Price", description: "The average price of a meal at the restaurant" },
      { name: "Social Media Followers", description: "The number of followers on the restaurant's social media accounts" },
      { name: "Revenue", description: "The total revenue generated by the restaurant (target variable)" },
    ],
  };
// todo add interpolation for time series
  return (
    <Container fluid>
      <Title order={1} id="handling-outliers" mt="xl" mb="md">Handling Outliers</Title>
      
      <Stack spacing="xl">
        <Section
          icon={<IconAlertTriangle size={24} />}
          title="Types of Outliers"
          id="types-of-outliers"
        >
          <Text>
            Outliers are data points that significantly differ from other observations. Understanding the types of outliers is crucial for proper detection and management:
          </Text>
          <List>
            <List.Item><span style={{ fontWeight: 700 }}>Point Outliers:</span> Individual data points that are far from the rest of the distribution.</List.Item>
            <List.Item><span style={{ fontWeight: 700 }}>Contextual Outliers:</span> Data points that are outliers in a specific context but not otherwise.</List.Item>
            <List.Item><span style={{ fontWeight: 700 }}>Collective Outliers:</span> A collection of data points that deviate from the entire dataset.</List.Item>
          </List>
          <Text mt="md">
            Outliers can arise due to various reasons, including measurement errors, experimental variability, or genuine anomalies in the data.
          </Text>
        </Section>

        <Section
          icon={<IconChartBar size={24} />}
          title="Detecting and Visualizing Outliers"
          id="detecting-visualizing-outliers"
        >
          <Text>
            Different techniques can be employed to detect and visualize outliers, depending on the data distribution and the type of outliers:
          </Text>
          
          <Title order={4} mt="md">Detecting Methods</Title>
          <List>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Z-Score Method:</span> Identifies outliers based on standard deviations from the mean.
              <CodeBlock
                language="python"
                code={`
import numpy as np
from scipy import stats

def detect_outliers_zscore(data, threshold=3):
    z_scores = np.abs(stats.zscore(data))
    return data[z_scores > threshold]

outliers = detect_outliers_zscore(df['column'])
print(outliers)
                `}
              />
            </List.Item>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Interquartile Range (IQR) Method:</span> Detects outliers using the IQR.
              <CodeBlock
                language="python"
                code={`
def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return data[(data < lower_bound) | (data > upper_bound)]

outliers = detect_outliers_iqr(df['column'])
print(outliers)
                `}
              />
            </List.Item>
          </List>

          <Title order={4} mt="md">Visualization Techniques</Title>
          <List>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Box Plots:</span> Visualize distribution and outliers.
              <CodeBlock
                language="python"
                code={`
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['column'])
plt.title('Box Plot for Outlier Detection')
plt.show()
                `}
              />
            </List.Item>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Scatter Plots:</span> Useful for identifying outliers in two-dimensional data.
              <CodeBlock
                language="python"
                code={`
plt.figure(figsize=(10, 6))
sns.scatterplot(x='column1', y='column2', data=df)
plt.title('Scatter Plot for Outlier Detection')
plt.show()
                `}
              />
            </List.Item>
          </List>
        </Section>

        <Section
          icon={<IconAdjustments size={24} />}
          title="Managing Outliers"
          id="managing-outliers"
        >
          <Text>
            Once outliers are detected, there are several strategies to manage them:
          </Text>
          
          <List>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Removing Outliers:</span> Suitable when outliers are due to errors.
              <CodeBlock
                language="python"
                code={`
# Remove outliers using IQR method
Q1 = df['column'].quantile(0.25)
Q3 = df['column'].quantile(0.75)
IQR = Q3 - Q1
df_clean = df[(df['column'] >= Q1 - 1.5*IQR) & (df['column'] <= Q3 + 1.5*IQR)]
                `}
              />
            </List.Item>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Capping (Winsorization):</span> Replace outliers with a specified percentile value.
              <CodeBlock
                language="python"
                code={`
def cap_outliers(data, lower_percentile=1, upper_percentile=99):
    lower = np.percentile(data, lower_percentile)
    upper = np.percentile(data, upper_percentile)
    return np.clip(data, lower, upper)

df['column_capped'] = cap_outliers(df['column'])
                `}
              />
            </List.Item>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Transformation:</span> Apply mathematical transformations to reduce the impact of outliers.
              <CodeBlock
                language="python"
                code={`
import numpy as np

# Log transformation
df['column_log'] = np.log1p(df['column'])

# Square root transformation
df['column_sqrt'] = np.sqrt(df['column'])
                `}
              />
            </List.Item>
            <List.Item>
              <span style={{ fontWeight: 700 }}>Imputation:</span> Replace outliers with statistical measures or predictions.
              <CodeBlock
                language="python"
                code={`
def impute_outliers(data, method='median'):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    
    if method == 'median':
        impute_value = data.median()
    elif method == 'mean':
        impute_value = data.mean()
    
    data_imputed = data.copy()
    data_imputed[(data < lower_bound) | (data > upper_bound)] = impute_value
    return data_imputed

df['column_imputed'] = impute_outliers(df['column'], method='median')
                `}
              />
            </List.Item>
          </List>
        </Section>

        <Section
          title="Considerations and Best Practices"
          id="considerations-best-practices"
        >
          <List>
            <List.Item>
              <Text><span style={{ fontWeight: 700 }}>Domain Knowledge:</span> Incorporate domain expertise to determine if outliers are genuine anomalies or errors.</Text>
            </List.Item>
            <List.Item>
              <Text><span style={{ fontWeight: 700 }}>Impact Analysis:</span> Assess the impact of outliers on your analysis or model before deciding on a management strategy.</Text>
            </List.Item>
            <List.Item>
              <Text><span style={{ fontWeight: 700 }}>Multiple Approaches:</span> Use a combination of methods to detect and manage outliers for robust results.</Text>
            </List.Item>
          </List>
        </Section>
      </Stack>
      <div id="notebook-example"></div>
      <DataInteractionPanel
        trainDataUrl="/modules/module5/course/module5_course_handling_outliers_train.csv"
        testDataUrl="/modules/module5/course/module5_course_handling_outliers_test.csv"
        notebookUrl="/modules/module5/course/handling_outliers.ipynb"
        notebookHtmlUrl="/modules/module5/course/handling_outliers.html"
        notebookColabUrl="/website/public/modules/module5/course/handling_outliers.ipynb"
        requirementsUrl="/modules/module5/course/module5_requirements.txt"
        metadata={metadata}
      />
    </Container>
  );
};

const Section = ({ icon, title, id, children }) => (
  <Stack spacing="sm">
    <Group spacing="xs">
      {icon}
      <Title order={2} id={id}>{title}</Title>
    </Group>
    {children}
  </Stack>
);

export default HandleOutliers;